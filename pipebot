#!/usr/bin/env python

from __future__ import print_function

import os
import re
import select
import socket
import stat
import sys

# Defaults and local config
import config

def privmsg(socket, target, msg):
    socket.send( "PRIVMSG %s :%s\r\n" % (target, msg) )

def open_fifo():
    fifofd = os.open( config.PIPE_PATH,
                      os.O_RDONLY | os.O_NONBLOCK )
    return fifofd

def debug_print(*args):
    if config.VERBOSE:
        print(' '.join(args))

s=socket.socket()
s.connect((config.HOST, config.PORT))
s.setblocking(0)

s.send("NICK %s\r\n" % config.NICK)
s.send("USER %s %s bla :%s\r\n" % (config.IDENT, config.HOST, config.REALNAME))
s.send("JOIN %s\r\n" % config.CHANNEL)
s.send("PRIVMSG %s :%s\r\n" % (config.CHANNEL, "Ready to plumb.") )

if not os.path.exists(config.PIPE_PATH):
    os.mkfifo(config.PIPE_PATH)

if not stat.S_ISFIFO(os.stat(config.PIPE_PATH).st_mode):
    not_fifo_warning = "Warning: PIPE_PATH '{0}' doesn't look like a FIFO".format(config.PIPE_PATH)
    print(not_fifo_warning, file=sys.stderr)

irc_buf = ""
pipe_buf = ""

fifofd = open_fifo()

pass_fn = os.path.join(os.path.abspath(os.path.dirname(__file__)), "pass")
if os.path.exists(pass_fn):
    passfile = open(pass_fn, "r")
    privmsg( s, config.TARGET_BOT, "login pipebot %s" % (passfile.read().strip()) )
    passfile.close()

channel_join = "^:.*!.* JOIN {channel}".format(channel = config.CHANNEL)

while True:
    ready = select.select( [fifofd,s], [], [fifofd] )

    if s in ready[0]:
        recv_data = s.recv(100)
        if len(recv_data) == 0:
            # Short read when select says data is available, means EOF.
            print("Read EOF from irc server", file=sys.stderr)
            # Don't reconnect automagically; init will restart us automatically,
            # with accounting.
            sys.exit(1)

        irc_buf += recv_data

        while "\n" in irc_buf:
            lp = irc_buf.find("\n")

            l = irc_buf[0:lp]
            irc_buf = irc_buf[lp+1:]

            debug_print(l)
            if l[:4] == "PING":
                resp = l.replace( "I", "O", 1 )
                s.send( resp )
                continue

            if re.match(channel_join, l) is not None:
                print("Joined channel '{}'. Ready to plumb".format(config.CHANNEL))

    if fifofd in ready[0]:
        d = os.read(fifofd, 100)
        if len(d) == 0:
            os.close(fifofd)
            fifofd = open_fifo()
            continue

        pipe_buf += d

        while "\n" in pipe_buf:
            nlpos = pipe_buf.find("\n")
            line = pipe_buf[0:nlpos]
            pipe_buf = pipe_buf[nlpos+1:]

            if re.match( "^[^ ]+: ping$", line ) == None:
                privmsg(s, config.CHANNEL, config.MESSAGE_PREFIX + line)

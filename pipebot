#!/usr/bin/env python3

from __future__ import print_function

import os
import re
import select
import socket
import sys

# Defaults and local config
import config

s=socket.socket()
s.connect((config.HOST, config.PORT))
s.setblocking(0)

def debug_print(*args):
    if config.VERBOSE:
        print(' '.join(args))

def send(line, **kwargs):
    output = line.format(config=config, **kwargs)
    s.send((output + "\r\n").encode('utf-8'))
    debug_print('< {}'.format(output))

send('NICK {config.NICK}')
send('USER {config.IDENT} {config.HOST} bla :{config.REALNAME}')
send('JOIN {config.CHANNEL}')
send('PRIVMSG {config.CHANNEL} :Ready to plumb.')

if not os.path.exists(config.PIPE_PATH):
    os.mkfifo(config.PIPE_PATH)

irc_buf = b""
pipe_buf = b""

def privmsg(target, msg):
    send('PRIVMSG {target} :{message}'.format(target=target, message=msg))

def open_fifo():
    fifofd = os.open( config.PIPE_PATH,
                      os.O_RDONLY | os.O_NONBLOCK )
    return fifofd

fifofd = open_fifo()

pass_fn = os.path.join(os.path.abspath(os.path.dirname(__file__)), "pass")
if os.path.exists(pass_fn):
    passfile = open(pass_fn, "r")
    privmsg( config.TARGET_BOT, "login pipebot {}".format(passfile.read().strip()) )
    passfile.close()

channel_join = "^:.*!.* JOIN {channel}".format(channel = config.CHANNEL)

while True:
    ready = select.select( [fifofd,s], [], [fifofd] )

    if s in ready[0]:
        recv_data = s.recv(100)
        if len(recv_data) == 0:
            # Short read when select says data is available, means EOF.
            print("Read EOF from irc server", file=sys.stderr)
            # Don't reconnect automagically; init will restart us automatically,
            # with accounting.
            sys.exit(1)

        irc_buf += recv_data

        while b"\n" in irc_buf:
            lp = irc_buf.find(b"\n")

            l = irc_buf[0:lp].rstrip(b'\r').decode('utf-8')
            irc_buf = irc_buf[lp+1:]

            debug_print('> {}'.format(l))

            match = re.match('^PING :(.*)', l)
            if match is not None:
                send('PONG :{token} {token}'.format(token=match.group(1)))

            if re.match(channel_join, l) is not None:
                print("Joined channel '{}'. Ready to plumb".format(config.CHANNEL))

    if fifofd in ready[0]:
        d = os.read(fifofd, 100)
        if len(d) == 0:
            os.close(fifofd)
            fifofd = open_fifo()
            continue

        pipe_buf += d

        while b"\n" in pipe_buf:
            nlpos = pipe_buf.find(b"\n")
            line = pipe_buf[0:nlpos].decode('utf-8')
            pipe_buf = pipe_buf[nlpos+1:]

            if re.match( "^[^ ]+: ping$", line ) == None:
                privmsg(config.CHANNEL, config.MESSAGE_PREFIX + line)
